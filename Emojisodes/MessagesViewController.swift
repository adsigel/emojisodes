//
//  MessagesViewController.swift
//  Emojisodes
//
//  Created by Adam Sigel on 12/19/16.
//  Copyright Â© 2016 Adam Sigel. All rights reserved.
//

import UIKit
import Messages
import AnalyticsSwift

var extMovies : Array = [String]()
var extUzer : String = ""

class MessagesViewController: MSMessagesAppViewController {
    
    var analytics = Analytics.create("8KlUfkkGBbR8SOKAqwCK7C23AZ43KkQj")
    var stickerBrowser: MSStickerBrowserView?
    var defaults: NSUserDefaults = NSUserDefaults(suiteName: "group.com.adamdsigel.emojisodes")!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        syncDefaults()
        // Do any additional setup after loading the view.
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    private func setupStickerBrowser(){

        if stickerBrowser == nil {
            //1. Sticker Browser Initialization
            stickerBrowser = MSStickerBrowserView()
            view.addSubview(stickerBrowser!)
        }
    }
    
    func syncDefaults() {
        if let extUzer = defaults.stringForKey("extensionUzer") {
            print("extUzer is \(extUzer)")
        } else {
            print("no extUzer to be found here")
        }
        if let extMovies = defaults.arrayForKey("extensionMovies") {
            print("extMovies is \(extMovies)")
            print("extMovies is of type \(extMovies.dynamicType)")
        } else {
            print("no extMovies to be found here")
        }
    }

    
    func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        setupStickerBrowser()
        analytics.enqueue(TrackMessageBuilder(event: "Opened Message Extension").userId(extUzer))
        analytics.flush()
    }
    
    func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
        analytics.flush()
    }
   
    func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
        analytics.enqueue(TrackMessageBuilder(event: "Sent Message").userId(extUzer))
        analytics.flush()
    }
    
    func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}
